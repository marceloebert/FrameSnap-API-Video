name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  REGION_DEFAULT: us-east-1
  CLUSTER_NAME: EKS-FRAMESNAP

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Run Gradle Tests with Coverage
        run: ./gradlew clean test jacocoTestReport

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/reports/jacoco/test/

  code-analysis:
    runs-on: ubuntu-latest
    needs: unit-test
    environment: SONAR
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: build/reports/jacoco/test/

      - name: Set JAVA_HOME corretamente para o Gradle Daemon
        run: echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" >> $GITHUB_ENV

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube --stacktrace -Dsonar.projectKey=marceloebert_FrameSnap-API-Video -Dsonar.organization=marceloebert

  build:
    runs-on: ubuntu-latest
    needs: [unit-test, code-analysis]
    environment:
      name: AWS
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Build JAR
        run: ./gradlew build -x test

      - name: Build Docker image
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/api-framesnap-video:latest .

      - name: Save Docker image as file
        run: |
          docker save -o image.tar ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/api-framesnap-video:latest

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: AWS
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image from file
        run: |
          docker load -i image.tar

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/api-framesnap-video:latest

  update-eks:
    runs-on: ubuntu-latest
    needs: deploy
    environment:
      name: AWS
    steps:
      - name: Configure kubectl
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Update Kubernetes Deployment
        run: |
          kubectl set image deployment/api-video-pod c-api=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/api-framesnap-video:latest
          kubectl scale deployment api-video-pod --replicas=0
          kubectl scale deployment api-video-pod --replicas=2
